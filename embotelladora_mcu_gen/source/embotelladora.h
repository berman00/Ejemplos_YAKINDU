/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef EMBOTELLADORA_H_
#define EMBOTELLADORA_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the Embotelladora state machine.
*/
typedef struct Embotelladora Embotelladora;

/*!
* Forward declaration of the data structure for the EmbotelladoraIface interface scope.
*/
typedef struct EmbotelladoraIface EmbotelladoraIface;

#ifdef __cplusplus
}
#endif

#include "sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'embotelladora'.
*/

#ifndef EMBOTELLADORA_EVENTQUEUE_BUFFERSIZE
#define EMBOTELLADORA_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef EMBOTELLADORA_IN_EVENTQUEUE_BUFFERSIZE
#define EMBOTELLADORA_IN_EVENTQUEUE_BUFFERSIZE EMBOTELLADORA_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */
#define EMBOTELLADORA_STATE_COUNT 4

/*! Define dimension of the state configuration vector for orthogonal states. */
#define EMBOTELLADORA_MAX_ORTHOGONAL_STATES 1

/*! Define indices of states in the StateConfVector */
#define SCVI_EMBOTELLADORA_MAIN_REGION_INICIO 0
#define SCVI_EMBOTELLADORA_MAIN_REGION_MOVIMIENTO 0
#define SCVI_EMBOTELLADORA_MAIN_REGION_LLENANDO 0
#define SCVI_EMBOTELLADORA_MAIN_REGION_RETIRAR_BOTELLA 0


/*
 * Enum of event names in the statechart.
 */
typedef enum  {
	Embotelladora_invalid_event = SC_INVALID_EVENT_VALUE,
	Embotelladora_sensorG_ON,
	Embotelladora_sensorG_OFF,
	Embotelladora_sensorC_ON
} EmbotelladoraEventID;

/*
 * Struct that represents a single event.
 */
typedef struct {
	EmbotelladoraEventID name;
} embotelladora_event;

/*
 * Queue that holds the raised events.
 */
typedef struct embotelladora_eventqueue_s {
	embotelladora_event *events;
	sc_integer capacity;
	sc_integer pop_index;
	sc_integer push_index;
	sc_integer size;
} embotelladora_eventqueue;

/*! Enumeration of all states */ 
typedef enum
{
	Embotelladora_last_state,
	Embotelladora_main_region_Inicio,
	Embotelladora_main_region_Movimiento,
	Embotelladora_main_region_Llenando,
	Embotelladora_main_region_Retirar_Botella
} EmbotelladoraStates;


/*! Type declaration of the data structure for the EmbotelladoraIface interface scope. */
struct EmbotelladoraIface
{
	sc_boolean sensorG_ON_raised;
	sc_boolean sensorG_OFF_raised;
	sc_boolean sensorC_ON_raised;
	sc_boolean T_valvula;
	sc_boolean M_cinta;
};






/*! 
 * Type declaration of the data structure for the Embotelladora state machine.
 * This data structure has to be allocated by the client code. 
 */
struct Embotelladora
{
	EmbotelladoraStates stateConfVector[EMBOTELLADORA_MAX_ORTHOGONAL_STATES];
	EmbotelladoraIface iface;
	sc_boolean isExecuting;
	sc_boolean stateConfVectorChanged;
	embotelladora_eventqueue in_event_queue;
	embotelladora_event in_buffer[EMBOTELLADORA_IN_EVENTQUEUE_BUFFERSIZE];
};



/*! Initializes the Embotelladora state machine data structures. Must be called before first usage.*/
extern void embotelladora_init(Embotelladora* handle);


/*! Activates the state machine. */
extern void embotelladora_enter(Embotelladora* handle);

/*! Deactivates the state machine. */
extern void embotelladora_exit(Embotelladora* handle);




/*! Raises the in event 'sensorG_ON' that is defined in the default interface scope. */ 
extern void embotelladora_raise_sensorG_ON(Embotelladora* handle);
/*! Raises the in event 'sensorG_OFF' that is defined in the default interface scope. */ 
extern void embotelladora_raise_sensorG_OFF(Embotelladora* handle);
/*! Raises the in event 'sensorC_ON' that is defined in the default interface scope. */ 
extern void embotelladora_raise_sensorC_ON(Embotelladora* handle);
/*! Gets the value of the variable 'T_valvula' that is defined in the default interface scope. */ 
extern sc_boolean embotelladora_get_t_valvula(const Embotelladora* handle);
/*! Gets the value of the variable 'M_cinta' that is defined in the default interface scope. */ 
extern sc_boolean embotelladora_get_m_cinta(const Embotelladora* handle);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean embotelladora_is_active(const Embotelladora* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean embotelladora_is_final(const Embotelladora* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean embotelladora_is_state_active(const Embotelladora* handle, EmbotelladoraStates state);


#ifdef __cplusplus
}
#endif 

#endif /* EMBOTELLADORA_H_ */
